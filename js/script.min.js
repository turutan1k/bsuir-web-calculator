const inputBox = document.getElementById("input"),
    expressionDiv = document.getElementById("expression"),
    resultDiv = document.getElementById("result")
let expression = "",
    result = ""
const buttonClick = (e) => {
    let s = e.target,
        t = s.dataset.action,
        r = s.dataset.value
    switch (t) {
        case "number":
            addValue(r)
            break
        case "clear":
            clear()
            break
        case "backspace":
            backspace()
            break
        case "addition":
        case "subtraction":
        case "multiplication":
        case "division":
            "" === expression && "" !== result
                ? startFromResult(r)
                : "" === expression || isLastCharOperator() || addValue(r)
            break
        case "submit":
            submit()
            break
        case "negate":
            negate()
            break
        case "mod":
            percentage()
            break
        case "decimal":
            decimal(r)
    }
    updateDisplay(expression, result)
}
inputBox.addEventListener("click", buttonClick)
const addValue = (e) => {
        if ("." === e) {
            let s = expression.search(/[+\-*/]/),
                t = expression.lastIndexOf("."),
                r = Math.max(
                    expression.lastIndexOf("+"),
                    expression.lastIndexOf("-"),
                    expression.lastIndexOf("*"),
                    expression.lastIndexOf("/")
                )
            ;(t < s || t < r || -1 === t) &&
                ("" === expression ||
                    -1 === expression.slice(r + 1).indexOf("-")) &&
                (expression += e)
        } else expression += e
    },
    updateDisplay = (e, s) => {
        ;(expressionDiv.textContent = e), (resultDiv.textContent = s)
    },
    clear = () => {
        ;(expression = ""), (result = "")
    },
    backspace = () => {
        expression = expression.slice(0, -1)
    },
    isLastCharOperator = () => isNaN(parseInt(expression.slice(-1))),
    startFromResult = (e) => {
        expression += result + e
    },
    submit = () => {
        ;(result = evaluateExpression()), (expression = "")
    },
    evaluateExpression = () => {
        let evalResult = eval(expression)
        return isNaN(evalResult) || !isFinite(evalResult)
            ? " "
            : evalResult < 1
            ? parseFloat(evalResult.toFixed(10))
            : parseFloat(evalResult.toFixed(2))
    },
    negate = () => {
        "" === expression && "" !== result
            ? (result = -result)
            : expression.startsWith("-") || "" === expression
            ? expression.startsWith("-") && (expression = expression.slice(1))
            : (expression = "-" + expression)
    },
    percentage = () => {
        "" !== expression
            ? ((result = evaluateExpression()),
              (expression = ""),
              !isNaN(result) && isFinite(result)
                  ? (result /= 100)
                  : (result = ""))
            : "" !== result && (result = parseFloat(result) / 100)
    },
    decimal = (e) => {
        expression.endsWith(".") || isNaN(expression.slice(-1)) || addValue(e)
    }
